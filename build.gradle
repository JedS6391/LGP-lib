plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
}

group 'nz.co.jedsimson.lgp'
version '1.2'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    compile "nz.co.jedsimson.lgp:LGP:5.0"
    compile "nz.co.jedsimson.lgp:LGP:5.0:sources"

    // For YAML parsing
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.0'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.9.2'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.2'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// Javadoc
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

// All source files
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// Prints the current project version
task printVersion {
    doLast {
        println project.version
    }
}

// Signing and deployment
apply plugin: 'maven'

// We don't want local builds to have to depend on the signing process, so we disable
// signing if the signing GPG key ID is not present.
if (System.getenv('GPG_KEY_ID')) {
    apply plugin: 'signing'

    signing {
        required { gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
        setRequired { required true }
    }
}

artifacts {
    archives sourcesJar, javadocJar
}

// Build, sign, and upload
uploadArchives {
    repositories {
        mavenDeployer {

            // Sign POM
            beforeDeployment {
                MavenDeployment deployment -> signing.signPom(deployment)
            }

            // Destination
            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }
            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: System.getenv('SONATYPE_USERNAME'), password: System.getenv('SONATYPE_PASSWORD'))
            }

            // Add required metadata to POM
            pom.project {
                name 'LGP-lib'
                packaging 'jar'
                description 'A library of implementations for core LGP framework components.'
                url 'https://github.com/JedS6391/LGP-lib'

                scm {
                    connection 'scm:git:git://github.com/JedS6391/LGP-lib.git'
                    developerConnection 'scm:git:ssh://github.com/JedS6391/LGP-lib.git'
                    url 'http://github.com/JedS6391/LGP-lib/tree/master'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://github.com/JedS6391/LGP-lib/blob/master/LICENSE'
                    }
                }

                developers {
                    developer {
                        id 'jedsimson'
                        name 'Jed Simson'
                        email 'jed.simson@gmail.com'
                        organization 'jedsimson'
                        organizationUrl 'https://jedsimson.co.nz'
                    }
                }
            }
        }
    }
}
